openapi: 3.0.0
servers:
  - url: 'https://127.0.0.1:12000/'
info:
  title: E-commerce API
  description: >-
    This API provides endpoints for a sample e-commerce application that
    allows users to browse and search products online. All 
    endpoints require JWT authentication security
    scheme. The API also includes error handling and validation for 
    all requests and responses.
  version: 1.0.0
  contact:
    email: rnapoles86@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: Users
    description: Operations about user
  - name: Products
    description: Operations about product
  - name: Sales
    description: Operations about sale

paths:
  /api/login:
    post:
      tags:
        - Users
      operationId: login
      summary: 'Authenticate user and generate JWT token.'
      security: []   # No security
      responses:
        '200':
          description: 'Successful login'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT'
          links:
            GetUser:
              parameters:
                token: '$response.body#/token'
              operationId: getUser
              description: 'The `token` value returned in the response can be used as the `token` parameter in `GET /api/user`.'
        '400':
          description: 'Invalid input'
        '401':
          description: 'Invalid credentials'
        '500':
          description: 'Internal server error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
        description: 'The Login resource'

  '/api/user':
    get:
      tags:
        - Users
      operationId: getUser
      summary: 'Retrieves a user resource.'
      responses:
        '200':
          description: 'User resource response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: 'Invalid credentials'
        '404':
          description: 'Resource not found'

  /api/product/create:
    post:
      tags:
        - Products
      summary: Create a new product
      description: Creates a new product object in the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input
        '401':
          description: Invalid credentials
        '500':
          description: Internal server error

  /api/product/delete/{id}:
    delete:
      tags:
        - Products
      summary: Delete a product
      description: Deletes a product object from the system
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
          description: The ID of the product to be deleted
      responses:
        '200':
          description: Product deleted successfully
        '401':
          description: Invalid credentials
        '404':
          description: Product not found
        '500':
          description: Internal server error

  /api/product/{sku}:
    get:
      tags:
        - Products
      summary: Find a product by SKU
      description: Returns a product object with the specified SKU
      parameters:
        - in: path
          name: sku
          required: true
          schema:
            type: string
            pattern: '^[A-Z]{3}-\d{4}-[A-Z]{3}-\d{4}$'
          description: The SKU of the product
      responses:
        '200':
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
              example:
                id: 100
                name: LG Aristo
                price: 195.99
                unitsInStock: 100
                category: Electronics
                tags: ["mobile", "smartphone", "android"]
                description: A high-end smartphone with advanced features
                aditionalInfo: Includes a one-year warranty
                valoration: 4
                sku: ABC-1234-DEF-5678
                images:
                  - https://example.com/image1.jpg
                  - https://example.com/image2.jpg
                  - https://example.com/image3.jpg
        '401':
          description: Invalid credentials
        '404':
          description: Product not found
        '500':
          description: Internal server error

  /api/product/{id}:
    patch:
      tags:
        - Products
      summary: Update a product
      description: Updates an existing product object in the system
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
          description: The ID of the product to be updated
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
            example:
              id: 1
              name: Smartphone
              price: 400.99
              unitsInStock: 100
              category: Electronics
              tags: ["mobile", "smartphone", "android"]
              description: A high-end smartphone with advanced features
              aditionalInfo: Includes a one-year warranty
              valoration: 4
              sku: ABC-1234-DEF-5678
              images:
                - https://example.com/image1.jpg
                - https://example.com/image2.jpg
                - https://example.com/image3.jpg
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input
        '401':
          description: Invalid credentials
        '404':
          description: Product not found
        '500':
          description: Internal server error

  /api/product/search:
    get:
      tags:
        - Products
      summary: Search for products
      description: Searches for product objects in the system using Meilisearch
      parameters:
        - in: query
          name: query
          required: false
          schema:
            type: string
          description: A query to filter the search results
          example: "valoration = 5"
        - in: query
          name: start
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
          description: The offset from which to start returning results
        - in: query
          name: total
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
          description: The maximum number of results to return
      responses:
        '200':
          description: Products found
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    format: int32
                    description: The total number of products matching the search criteria
                  hits:
                   $ref: '#/components/schemas/ProductHits'
        '400':
          description: Invalid input
        '401':
          description: Invalid credentials
        '500':
          description: Internal server error

components:

  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes

  schemas:
    Login:
      type: object
      description: 'Login object model.'
      properties:
        username:
          type: string
          description: User's username
          example: admin@localhost.loc
        password:
          type: string
          description: User's password
          example: 1234
      required:
        - username
        - password

    JWT:
      type: object
      description: 'Login object model.'
      properties:
        token:
          type: string
      required:
        - token

    User:
      type: object
      description: 'User object model.'
      properties:
        id:
          type: integer
        user:
          type: string
        email:
          type: string
        password:
          type: string
        token:
          type: string
        roles:
          type: array
          items:
            type: string
      required:
        - user
        - email
        - password
        - token

    Product:
      type: object
      properties:
        id:
          type: integer
          format: int32
          nullable: true
          description: The unique identifier for the product
        name:
          type: string
          description: The name of the product
        price:
          type: number
          format: float
          description: The price of the product
        unitsInStock:
          type: integer
          format: int32
          description: The number of units of the product in stock
        category:
          type: string
          description: The name of the category
        tags:
          type: array
          description: The tags associated with the product
          items:
            type: string
        description:
          type: string
          description: The description of the product
        aditionalInfo:
          type: string
          nullable: true
          description: Additional information about the product
        valoration:
          type: integer
          format: int32
          description: The valoration of the product
        sku:
          type: string
          nullable: true
          description: The SKU (Stock Keeping Unit) of the product
          pattern: '^[A-Z]{3}-\d{4}-[A-Z]{3}-\d{4}$'
        images:
          type: array
          description: The URLs of the product images
          items:
            $ref: '#/components/schemas/Url'
      required:
        - name
        - price
        - unitsInStock
        - category
        - tags
        - description
        - aditionalInfo
        - valoration
        - images
      example:
        name: Sansumg Galaxy S8
        price: 400.99
        unitsInStock: 100
        category: Electronics
        tags:
          - mobile
          - smartphone
          - android
        description: A high-end smartphone with advanced features
        aditionalInfo: Includes a one-year warranty
        valoration: 4
        sku: ABC-1234-DEF-6666
        images:
          - https://example.com/image1.jpg
          - https://example.com/image2.jpg
          - https://example.com/image3.jpg

    ProductHits:
      type: object
      properties:
        payload:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        total:
          type: number
          format: float
          description: The total of the search results
      required:
        - payload
      example:
        payload:
          - id: 1
            name: Smartphone
            price: 599.99
            unitsInStock: 100
            category:
              id: 1
              name: Electronics
            tags: ["mobile", "smartphone", "android"]
            description: A high-end smartphone with advanced features
            aditionalInfo: Includes a one-year warranty
            valoration: 4
            sku: ABC-1234-DEF-5678
            images:
              - https://example.com/image1.jpg
              - https://example.com/image2.jpg
              - https://example.com/image3.jpg
          - id: 2
            name: Smartwatch
            price: 199.99
            unitsInStock: 50
            category:
              id: 1
              name: Electronics
            tags: ["wearable", "smartwatch", "fitness"]
            description: A stylish and functional smartwatch for fitness enthusiasts
            aditionalInfo: Water resistant up to 50 meters
            valoration: 4.5
            sku: DEF-5678-GHI-9101
            images:
              - https://example.com/image4.jpg
              - https://example.com/image5.jpg

    Url:
      type: string
      format: uri
      description: A URL
      example: https://example.com/image.jpg

# Apply the security globally to all operations
security:
  - bearerAuth: []         # use the same name as above